/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GymEquipment as PrismaGymEquipment,
  Gym as PrismaGym,
} from "@prisma/client";

export class GymEquipmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GymEquipmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gymEquipment.count(args);
  }

  async gymEquipments<T extends Prisma.GymEquipmentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GymEquipmentFindManyArgs>
  ): Promise<PrismaGymEquipment[]> {
    return this.prisma.gymEquipment.findMany<Prisma.GymEquipmentFindManyArgs>(
      args
    );
  }
  async gymEquipment<T extends Prisma.GymEquipmentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GymEquipmentFindUniqueArgs>
  ): Promise<PrismaGymEquipment | null> {
    return this.prisma.gymEquipment.findUnique(args);
  }
  async createGymEquipment<T extends Prisma.GymEquipmentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GymEquipmentCreateArgs>
  ): Promise<PrismaGymEquipment> {
    return this.prisma.gymEquipment.create<T>(args);
  }
  async updateGymEquipment<T extends Prisma.GymEquipmentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GymEquipmentUpdateArgs>
  ): Promise<PrismaGymEquipment> {
    return this.prisma.gymEquipment.update<T>(args);
  }
  async deleteGymEquipment<T extends Prisma.GymEquipmentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GymEquipmentDeleteArgs>
  ): Promise<PrismaGymEquipment> {
    return this.prisma.gymEquipment.delete(args);
  }

  async getGym(parentId: string): Promise<PrismaGym | null> {
    return this.prisma.gymEquipment
      .findUnique({
        where: { id: parentId },
      })
      .gym();
  }
}
