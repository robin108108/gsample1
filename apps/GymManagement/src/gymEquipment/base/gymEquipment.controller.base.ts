/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GymEquipmentService } from "../gymEquipment.service";
import { GymEquipmentCreateInput } from "./GymEquipmentCreateInput";
import { GymEquipment } from "./GymEquipment";
import { GymEquipmentFindManyArgs } from "./GymEquipmentFindManyArgs";
import { GymEquipmentWhereUniqueInput } from "./GymEquipmentWhereUniqueInput";
import { GymEquipmentUpdateInput } from "./GymEquipmentUpdateInput";

export class GymEquipmentControllerBase {
  constructor(protected readonly service: GymEquipmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GymEquipment })
  async createGymEquipment(
    @common.Body() data: GymEquipmentCreateInput
  ): Promise<GymEquipment> {
    return await this.service.createGymEquipment({
      data: {
        ...data,

        gym: data.gym
          ? {
              connect: data.gym,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        gym: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        photo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GymEquipment] })
  @ApiNestedQuery(GymEquipmentFindManyArgs)
  async gymEquipments(@common.Req() request: Request): Promise<GymEquipment[]> {
    const args = plainToClass(GymEquipmentFindManyArgs, request.query);
    return this.service.gymEquipments({
      ...args,
      select: {
        createdAt: true,

        gym: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        photo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GymEquipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gymEquipment(
    @common.Param() params: GymEquipmentWhereUniqueInput
  ): Promise<GymEquipment | null> {
    const result = await this.service.gymEquipment({
      where: params,
      select: {
        createdAt: true,

        gym: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        photo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GymEquipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGymEquipment(
    @common.Param() params: GymEquipmentWhereUniqueInput,
    @common.Body() data: GymEquipmentUpdateInput
  ): Promise<GymEquipment | null> {
    try {
      return await this.service.updateGymEquipment({
        where: params,
        data: {
          ...data,

          gym: data.gym
            ? {
                connect: data.gym,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          gym: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          photo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GymEquipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGymEquipment(
    @common.Param() params: GymEquipmentWhereUniqueInput
  ): Promise<GymEquipment | null> {
    try {
      return await this.service.deleteGymEquipment({
        where: params,
        select: {
          createdAt: true,

          gym: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          photo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
