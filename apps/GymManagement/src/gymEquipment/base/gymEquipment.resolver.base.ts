/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GymEquipment } from "./GymEquipment";
import { GymEquipmentCountArgs } from "./GymEquipmentCountArgs";
import { GymEquipmentFindManyArgs } from "./GymEquipmentFindManyArgs";
import { GymEquipmentFindUniqueArgs } from "./GymEquipmentFindUniqueArgs";
import { CreateGymEquipmentArgs } from "./CreateGymEquipmentArgs";
import { UpdateGymEquipmentArgs } from "./UpdateGymEquipmentArgs";
import { DeleteGymEquipmentArgs } from "./DeleteGymEquipmentArgs";
import { Gym } from "../../gym/base/Gym";
import { GymEquipmentService } from "../gymEquipment.service";
@graphql.Resolver(() => GymEquipment)
export class GymEquipmentResolverBase {
  constructor(protected readonly service: GymEquipmentService) {}

  async _gymEquipmentsMeta(
    @graphql.Args() args: GymEquipmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GymEquipment])
  async gymEquipments(
    @graphql.Args() args: GymEquipmentFindManyArgs
  ): Promise<GymEquipment[]> {
    return this.service.gymEquipments(args);
  }

  @graphql.Query(() => GymEquipment, { nullable: true })
  async gymEquipment(
    @graphql.Args() args: GymEquipmentFindUniqueArgs
  ): Promise<GymEquipment | null> {
    const result = await this.service.gymEquipment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GymEquipment)
  async createGymEquipment(
    @graphql.Args() args: CreateGymEquipmentArgs
  ): Promise<GymEquipment> {
    return await this.service.createGymEquipment({
      ...args,
      data: {
        ...args.data,

        gym: args.data.gym
          ? {
              connect: args.data.gym,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => GymEquipment)
  async updateGymEquipment(
    @graphql.Args() args: UpdateGymEquipmentArgs
  ): Promise<GymEquipment | null> {
    try {
      return await this.service.updateGymEquipment({
        ...args,
        data: {
          ...args.data,

          gym: args.data.gym
            ? {
                connect: args.data.gym,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GymEquipment)
  async deleteGymEquipment(
    @graphql.Args() args: DeleteGymEquipmentArgs
  ): Promise<GymEquipment | null> {
    try {
      return await this.service.deleteGymEquipment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Gym, {
    nullable: true,
    name: "gym",
  })
  async getGym(@graphql.Parent() parent: GymEquipment): Promise<Gym | null> {
    const result = await this.service.getGym(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
