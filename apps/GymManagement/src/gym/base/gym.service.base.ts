/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Gym as PrismaGym,
  GymEquipment as PrismaGymEquipment,
  GymService as PrismaGymService,
} from "@prisma/client";

export class GymServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GymCountArgs, "select">): Promise<number> {
    return this.prisma.gym.count(args);
  }

  async gyms<T extends Prisma.GymFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GymFindManyArgs>
  ): Promise<PrismaGym[]> {
    return this.prisma.gym.findMany<Prisma.GymFindManyArgs>(args);
  }
  async gym<T extends Prisma.GymFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GymFindUniqueArgs>
  ): Promise<PrismaGym | null> {
    return this.prisma.gym.findUnique(args);
  }
  async createGym<T extends Prisma.GymCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GymCreateArgs>
  ): Promise<PrismaGym> {
    return this.prisma.gym.create<T>(args);
  }
  async updateGym<T extends Prisma.GymUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GymUpdateArgs>
  ): Promise<PrismaGym> {
    return this.prisma.gym.update<T>(args);
  }
  async deleteGym<T extends Prisma.GymDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GymDeleteArgs>
  ): Promise<PrismaGym> {
    return this.prisma.gym.delete(args);
  }

  async findGymEquipments(
    parentId: string,
    args: Prisma.GymEquipmentFindManyArgs
  ): Promise<PrismaGymEquipment[]> {
    return this.prisma.gym
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .gymEquipments(args);
  }

  async findGymServices(
    parentId: string,
    args: Prisma.GymServiceFindManyArgs
  ): Promise<PrismaGymService[]> {
    return this.prisma.gym
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .gymServices(args);
  }
}
