/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GymService } from "../gym.service";
import { GymService } from "../../gymService/base/GymService";
import { GymCreateInput } from "./GymCreateInput";
import { Gym } from "./Gym";
import { GymFindManyArgs } from "./GymFindManyArgs";
import { GymWhereUniqueInput } from "./GymWhereUniqueInput";
import { GymUpdateInput } from "./GymUpdateInput";
import { GymEquipmentFindManyArgs } from "../../gymEquipment/base/GymEquipmentFindManyArgs";
import { GymEquipment } from "../../gymEquipment/base/GymEquipment";
import { GymEquipmentWhereUniqueInput } from "../../gymEquipment/base/GymEquipmentWhereUniqueInput";
import { GymServiceFindManyArgs } from "../../gymService/base/GymServiceFindManyArgs";
import { GymServiceWhereUniqueInput } from "../../gymService/base/GymServiceWhereUniqueInput";

export class GymControllerBase {
  constructor(protected readonly service: GymService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Gym })
  async createGym(@common.Body() data: GymCreateInput): Promise<Gym> {
    return await this.service.createGym({
      data: data,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        payments: true,
        pricePerDay: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Gym] })
  @ApiNestedQuery(GymFindManyArgs)
  async gyms(@common.Req() request: Request): Promise<Gym[]> {
    const args = plainToClass(GymFindManyArgs, request.query);
    return this.service.gyms({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        payments: true,
        pricePerDay: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Gym })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gym(@common.Param() params: GymWhereUniqueInput): Promise<Gym | null> {
    const result = await this.service.gym({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        payments: true,
        pricePerDay: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Gym })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGym(
    @common.Param() params: GymWhereUniqueInput,
    @common.Body() data: GymUpdateInput
  ): Promise<Gym | null> {
    try {
      return await this.service.updateGym({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,
          payments: true,
          pricePerDay: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Gym })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGym(
    @common.Param() params: GymWhereUniqueInput
  ): Promise<Gym | null> {
    try {
      return await this.service.deleteGym({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,
          payments: true,
          pricePerDay: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/gymEquipments")
  @ApiNestedQuery(GymEquipmentFindManyArgs)
  async findGymEquipments(
    @common.Req() request: Request,
    @common.Param() params: GymWhereUniqueInput
  ): Promise<GymEquipment[]> {
    const query = plainToClass(GymEquipmentFindManyArgs, request.query);
    const results = await this.service.findGymEquipments(params.id, {
      ...query,
      select: {
        createdAt: true,

        gym: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        photo: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/gymEquipments")
  async connectGymEquipments(
    @common.Param() params: GymWhereUniqueInput,
    @common.Body() body: GymEquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gymEquipments: {
        connect: body,
      },
    };
    await this.service.updateGym({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/gymEquipments")
  async updateGymEquipments(
    @common.Param() params: GymWhereUniqueInput,
    @common.Body() body: GymEquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gymEquipments: {
        set: body,
      },
    };
    await this.service.updateGym({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/gymEquipments")
  async disconnectGymEquipments(
    @common.Param() params: GymWhereUniqueInput,
    @common.Body() body: GymEquipmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gymEquipments: {
        disconnect: body,
      },
    };
    await this.service.updateGym({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/gymServices")
  @ApiNestedQuery(GymServiceFindManyArgs)
  async findGymServices(
    @common.Req() request: Request,
    @common.Param() params: GymWhereUniqueInput
  ): Promise<GymService[]> {
    const query = plainToClass(GymServiceFindManyArgs, request.query);
    const results = await this.service.findGymServices(params.id, {
      ...query,
      select: {
        createdAt: true,

        gym: {
          select: {
            id: true,
          },
        },

        id: true,
        serviceDescription: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/gymServices")
  async connectGymServices(
    @common.Param() params: GymWhereUniqueInput,
    @common.Body() body: GymServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gymServices: {
        connect: body,
      },
    };
    await this.service.updateGym({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/gymServices")
  async updateGymServices(
    @common.Param() params: GymWhereUniqueInput,
    @common.Body() body: GymServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gymServices: {
        set: body,
      },
    };
    await this.service.updateGym({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/gymServices")
  async disconnectGymServices(
    @common.Param() params: GymWhereUniqueInput,
    @common.Body() body: GymServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gymServices: {
        disconnect: body,
      },
    };
    await this.service.updateGym({
      where: params,
      data,
      select: { id: true },
    });
  }
}
