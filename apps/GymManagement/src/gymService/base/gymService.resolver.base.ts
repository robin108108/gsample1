/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GymService } from "./GymService";
import { GymServiceCountArgs } from "./GymServiceCountArgs";
import { GymServiceFindManyArgs } from "./GymServiceFindManyArgs";
import { GymServiceFindUniqueArgs } from "./GymServiceFindUniqueArgs";
import { CreateGymServiceArgs } from "./CreateGymServiceArgs";
import { UpdateGymServiceArgs } from "./UpdateGymServiceArgs";
import { DeleteGymServiceArgs } from "./DeleteGymServiceArgs";
import { Gym } from "../../gym/base/Gym";
import { GymServiceService } from "../gymService.service";
@graphql.Resolver(() => GymService)
export class GymServiceResolverBase {
  constructor(protected readonly service: GymServiceService) {}

  async _gymServicesMeta(
    @graphql.Args() args: GymServiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GymService])
  async gymServices(
    @graphql.Args() args: GymServiceFindManyArgs
  ): Promise<GymService[]> {
    return this.service.gymServices(args);
  }

  @graphql.Query(() => GymService, { nullable: true })
  async gymService(
    @graphql.Args() args: GymServiceFindUniqueArgs
  ): Promise<GymService | null> {
    const result = await this.service.gymService(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GymService)
  async createGymService(
    @graphql.Args() args: CreateGymServiceArgs
  ): Promise<GymService> {
    return await this.service.createGymService({
      ...args,
      data: {
        ...args.data,

        gym: args.data.gym
          ? {
              connect: args.data.gym,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => GymService)
  async updateGymService(
    @graphql.Args() args: UpdateGymServiceArgs
  ): Promise<GymService | null> {
    try {
      return await this.service.updateGymService({
        ...args,
        data: {
          ...args.data,

          gym: args.data.gym
            ? {
                connect: args.data.gym,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GymService)
  async deleteGymService(
    @graphql.Args() args: DeleteGymServiceArgs
  ): Promise<GymService | null> {
    try {
      return await this.service.deleteGymService(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Gym, {
    nullable: true,
    name: "gym",
  })
  async getGym(@graphql.Parent() parent: GymService): Promise<Gym | null> {
    const result = await this.service.getGym(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
