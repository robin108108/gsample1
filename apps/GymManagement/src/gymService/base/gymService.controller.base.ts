/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GymServiceService } from "../gymService.service";
import { GymServiceCreateInput } from "./GymServiceCreateInput";
import { GymService } from "./GymService";
import { GymServiceFindManyArgs } from "./GymServiceFindManyArgs";
import { GymServiceWhereUniqueInput } from "./GymServiceWhereUniqueInput";
import { GymServiceUpdateInput } from "./GymServiceUpdateInput";

export class GymServiceControllerBase {
  constructor(protected readonly service: GymServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GymService })
  async createGymService(
    @common.Body() data: GymServiceCreateInput
  ): Promise<GymService> {
    return await this.service.createGymService({
      data: {
        ...data,

        gym: data.gym
          ? {
              connect: data.gym,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        gym: {
          select: {
            id: true,
          },
        },

        id: true,
        serviceDescription: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GymService] })
  @ApiNestedQuery(GymServiceFindManyArgs)
  async gymServices(@common.Req() request: Request): Promise<GymService[]> {
    const args = plainToClass(GymServiceFindManyArgs, request.query);
    return this.service.gymServices({
      ...args,
      select: {
        createdAt: true,

        gym: {
          select: {
            id: true,
          },
        },

        id: true,
        serviceDescription: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GymService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gymService(
    @common.Param() params: GymServiceWhereUniqueInput
  ): Promise<GymService | null> {
    const result = await this.service.gymService({
      where: params,
      select: {
        createdAt: true,

        gym: {
          select: {
            id: true,
          },
        },

        id: true,
        serviceDescription: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GymService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGymService(
    @common.Param() params: GymServiceWhereUniqueInput,
    @common.Body() data: GymServiceUpdateInput
  ): Promise<GymService | null> {
    try {
      return await this.service.updateGymService({
        where: params,
        data: {
          ...data,

          gym: data.gym
            ? {
                connect: data.gym,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          gym: {
            select: {
              id: true,
            },
          },

          id: true,
          serviceDescription: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GymService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGymService(
    @common.Param() params: GymServiceWhereUniqueInput
  ): Promise<GymService | null> {
    try {
      return await this.service.deleteGymService({
        where: params,
        select: {
          createdAt: true,

          gym: {
            select: {
              id: true,
            },
          },

          id: true,
          serviceDescription: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
